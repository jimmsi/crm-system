package com.yrgo.dataaccess;

import com.yrgo.domain.Call;
import com.yrgo.domain.Customer;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;

public class CustomerDaoJdbcTemplateImpl implements CustomerDao {

    private static final String DELETE_SQL = "DELETE FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String UPDATE_SQL = "UPDATE CUSTOMER SET COMPANY_NAME=?, EMAIL=?, TELEPHONE=?, NOTES=? WHERE CUSTOMER_ID=?";
    private static final String INSERT_SQL = "INSERT INTO CUSTOMER (CUSTOMER_ID, COMPANY_NAME, EMAIL, TELEPHONE, NOTES) VALUES (?,?,?,?,?)";
    private static String GET_BY_ID_SQL = "SELECT CUSTOMER_ID, COMPANY_NAME, EMAIL, TELEPHONE, NOTES FROM CUSTOMER WHERE CUSTOMER_ID = ?";
    private static String GET_BY_NAME_SQL = "SELECT CUSTOMER_ID, COMPANY_NAME, EMAIL, TELEPHONE, NOTES FROM CUSTOMER WHERE COMPANY_NAME = ?";
    private static String GET_ALL_SQL = "SELECT CUSTOMER_ID, COMPANY_NAME, EMAIL, TELEPHONE, NOTES FROM CUSTOMER";
    private static final String ADD_CALL_SQL = "INSERT INTO CALLS (TIME_AND_DATE, NOTES, CUSTOMER_ID) VALUES (?, ?, ?)";
    private static String GET_CALLS_BY_CUSTOMER_ID_SQL = "SELECT CALL_ID, TIME_AND_DATE, NOTES FROM CALLS WHERE CUSTOMER_ID = ?";

    private JdbcTemplate template;

    public CustomerDaoJdbcTemplateImpl(JdbcTemplate template){
        this.template = template;
    }
    @Override
    public void create(Customer newCustomer) {
        template.update(INSERT_SQL, newCustomer.getCustomerId(), newCustomer.getCompanyName(), newCustomer.getEmail(), newCustomer.getTelephone(), newCustomer.getNotes());
    }

    private void createTables() {
        try{
            this.template.update("CREATE TABLE CUSTOMER (CUSTOMER_ID VARCHAR(20) PRIMARY KEY, COMPANY_NAME VARCHAR(100), EMAIL VARCHAR(100), TELEPHONE VARCHAR(20), NOTES VARCHAR(255))");
        }catch (org.springframework.jdbc.BadSqlGrammarException e){
            System.out.println("Assuming the Customer table exists");
        }
        try{
            this.template.update("CREATE TABLE CALLS (CALL_ID integer generated by default as identity (start with 1), TIME_AND_DATE TIMESTAMP, NOTES VARCHAR(255), CUSTOMER_ID VARCHAR(20))");
        }catch (org.springframework.jdbc.BadSqlGrammarException e){
            System.out.println("Assuming the Calls table exists");
        }
    }

    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        return this.template.queryForObject(GET_BY_ID_SQL, new CustomerRowMapper(), customerId);
    }

    @Override
    public List<Customer> getByName(String name) {
        return this.template.query(GET_BY_NAME_SQL, new CustomerRowMapper(), name);
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
        this.template.update(UPDATE_SQL, customerToUpdate.getCompanyName(), customerToUpdate.getEmail(), customerToUpdate.getTelephone(), customerToUpdate.getNotes(), customerToUpdate.getCustomerId());
    }

    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        this.template.update(DELETE_SQL, oldCustomer.getCustomerId());
    }

    @Override
    public List<Customer> getAllCustomers() {
        return this.template.query(GET_ALL_SQL, new CustomerRowMapper());
    }

    @Override
    public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
       Customer customer = this.template.queryForObject(GET_BY_ID_SQL, new CustomerRowMapper(), customerId);
       List<Call> calls = this.template.query(GET_CALLS_BY_CUSTOMER_ID_SQL, new CallRowMapper(), customerId);
       customer.setCalls(calls);

       return customer;
    }

    @Override
    public void addCall(Call newCall, String customerId) throws RecordNotFoundException {
        template.update(ADD_CALL_SQL, newCall.getTimeAndDate(), newCall.getNotes(), customerId);
    }

}

class CustomerRowMapper implements RowMapper<Customer> {
    @Override
    public Customer mapRow(ResultSet rs, int rowNum) throws SQLException {
        String customerId = rs.getString("CUSTOMER_ID");
        String companyName = rs.getString("COMPANY_NAME");
        String email = rs.getString("EMAIL");
        String telephone = rs.getString("TELEPHONE");
        String notes = rs.getString("NOTES");

        return new Customer(customerId, companyName, email, telephone, notes);
    }
}

class CallRowMapper implements RowMapper<Call> {
    @Override
    public Call mapRow(ResultSet rs, int rowNum) throws SQLException {
        Date timeAndDate = rs.getTimestamp("TIME_AND_DATE");
        String notes = rs.getString("NOTES");

        return new Call(notes, timeAndDate);
    }
}

